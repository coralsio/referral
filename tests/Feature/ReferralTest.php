<?php

namespace Tests\Feature;

use Corals\Modules\Referral\Models\ReferralProgram;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class ReferralTest extends TestCase
{
    use DatabaseTransactions;

    protected $referralRequest;
    protected $referral;

    protected $name = ['name1', 'name2', 'name3', 'name4'];
    protected $status = ['active', 'inactive'];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();

        Auth::loginUsingId($user->id);
    }

    public function test_referral_view()
    {
        $response = $this->get('/referral/referral-programs');

        $response->assertStatus(200)->assertViewIs('ReferralProgram::referral_programs.index');

        $this->assertTrue(true);
    }

    public function test_create_referral()
    {
        $response = $this->get('/referral/referral-programs/create');

        $response->assertStatus(200)->assertViewIs('ReferralProgram::referral_programs.create_edit');

        $this->assertTrue(true);
    }

    public function test_store_referral_programs()
    {
        $this->referralRequest = [
            'name' => $this->name[array_rand($this->name)].rand(0, 10000),
            'status' => $this->status[array_rand($this->status)],
            'referral_action' => 'subscription',
            'title' => "dddd",
            'uri' => route('referral-programs.index'),
            'description' => 'testNote',
        ];

        $response = $this->post('/referral/referral-programs', $this->referralRequest);

        $this->referral = ReferralProgram::query()->where('name', $this->referralRequest['name'])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('/referral/referral-programs');

        $this->assertDatabaseHas('referral_programs', [
            'name' => $this->referral->name,
            'status' => $this->referral->status,
            'referral_action' => $this->referral->referral_action,
            'title' => $this->referral->title,
            'uri' => $this->referral->uri,
            'description' => $this->referral->description,
        ]);

        $this->assertTrue(true);
    }

    public function test_referral_edit()
    {
        $this->test_store_referral_programs();
        if ($this->referral) {
            $response = $this->get('/referral/referral-programs/' . $this->referral->hashed_id . '/edit');

            $response->assertViewIs('ReferralProgram::referral_programs.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_referal_program_update()
    {
        $this->test_store_referral_programs();

        if ($this->referral) {
            $status = $this->referral->status == 'active' ? 'inactive' : 'active';
            $response = $this->put('referral/referral-programs/' . $this->referral->hashed_id, [
                'name' => $this->referral->name,
                'status' => $status,
                'referral_action' => $this->referral->referral_action,
                'title' => $this->referral->title,
                'uri' => $this->referral->uri,
                'description' => $this->referral->description,
            ]);

            $response->assertRedirect('referral/referral-programs');

            $this->assertDatabaseHas('referral_programs', [
                'name' => $this->referral->name,
                'status' => $status,
                'referral_action' => $this->referral->referral_action,
                'title' => $this->referral->title,
                'uri' => $this->referral->uri,
                'description' => $this->referral->description,
            ]);
            $this->assertTrue(true);
        } else {
            $this->assertFalse(false, 'Referral Not Found');
        }
    }

    public function test_referral_program_delete()
    {
        $this->test_store_referral_programs();

        if ($this->referral) {
            $response = $this->delete('referral/referral-programs/' . $this->referral->hashed_id);

            $response->assertStatus(200)->assertSeeText('Referral Program has been deleted successfully.');

            $this->isSoftDeletableModel(ReferralProgram::class);

            $this->assertDatabaseMissing(
                'referral_programs',
                [
                    'name' => $this->referral->name,
                    'status' => $this->referral->status,
                    'referral_action' => $this->referral->referral_action,
                    'title' => $this->referral->title,
                    'uri' => $this->referral->uri,
                    'description' => $this->referral->description,
                ]
            );
            $this->assertTrue(true);
        } else {
            $this->assertFalse(false, 'Referral Not Found');
        }
    }
}
